<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Pack.mapper.InventoryMapper">
	<select id="selectAll"  resultType="Pack.vo.InventoryVo">
		select *, TIMESTAMPDIFF(MONTH, warehouse_date, now()) as fixed_month, datediff(now(), inventory_date) as warehouse_aging 
		from Inventory;
	</select>
	
	<select id="selectByLotNo" parameterType="String" resultType="Pack.vo.InventoryVo">
		select *, TIMESTAMPDIFF(MONTH, warehouse_date, now()) as fixed_month, datediff(now(), inventory_date) as warehouse_aging 
		from Inventory
		where lot_no=#{lot_no}
	</select>
	
	<select id="selectSome" parameterType="Pack.vo.InventorySch" resultType="Pack.vo.InventoryVo">
     	select *, TIMESTAMPDIFF(MONTH, warehouse_date, now()) as fixed_month, datediff(now(), inventory_date) as warehouse_aging
     	from Inventory
    	WHERE
    		<if test='industry_family != null and industry_family neq "전체보기"'>industry_family=#{industry_family} and</if>
    		<if test='stock_type != null and stock_type neq "전체보기"'>stock_type=#{stock_type} and</if>
    		<if test='stock_quality_status != null and stock_quality_status neq "전체보기"'>stock_quality_status=#{stock_quality_status} and</if>
    		<if test='status_cause != null and status_cause neq "전체보기"'>status_cause=#{status_cause} and</if>
    		<if test='location != null and location neq "전체보기"'>location=#{location} and</if>
    		<if test='product_family != null and product_family neq "전체보기"'>product_family=#{product_family} and</if>
    		<if test='warehouse_code != null and warehouse_code neq "전체보기"'>warehouse_code=#{warehouse_code} and</if>
    		<if test='lot_no != null and lot_no neq "전체보기"'>lot_no=#{lot_no} and</if>
    		<if test='item_code != null and item_code neq "전체보기"'>item_code=#{item_code} and</if>
    		<if test='state != null and state neq "전체보기"'>state=#{state} and</if>
    		<if test='item_name != null and item_name neq "전체보기"'>item_name=#{item_name} and</if>
    		<if test='unit != null and unit neq "전체보기"'>unit=#{unit} and</if>
    		<if test='customer != null and customer neq "전체보기"'>customer=#{customer} and</if>
    		<if test='inventory_date != null and inventory_date neq "전체보기"'>inventory_date=#{inventory_date} and</if>
    		<if test='warehouse_date != null and warehouse_date neq "전체보기"'>warehouse_date=#{warehouse_date} and</if>
	    	(amount between #{min_amount} and #{max_amount}) and
	    	(weight between #{min_weight} and #{max_weight}) and
	    	(width between #{min_width} and #{max_width}) and
	    	(thickness between #{min_thickness} and #{max_thickness}) and
	    	(height between #{min_height} and #{max_height})
    </select>
    
    <select id="selectWarehouse"  resultType="Pack.vo.InventoryVo">
		select *, TIMESTAMPDIFF(MONTH, warehouse_date, now()) as fixed_month, datediff(now(), inventory_date) as warehouse_aging 
		from Inventory
		WHERE warehouse_code = #{warehouse_code}
	</select>
	
    <select id="selectItemname"  resultType="Pack.vo.InventoryItemname">
		SELECT distinct item_name
		FROM Inventory
		WHERE location = #{location}
	</select>
	
    <select id="selectCustomer"  resultType="Pack.vo.InventoryCustomer">
		SELECT distinct customer
		FROM Inventory
		WHERE location = #{location}
	</select>
		
    <select id="selectByLocAndWare" parameterType="HashMap" resultType="Pack.vo.InventoryVo">
		select *, TIMESTAMPDIFF(MONTH, warehouse_date, now()) as fixed_month, datediff(now(), inventory_date) as warehouse_aging
		FROM Inventory
		WHERE location = #{location} and
		warehouse_code = #{warehouseCode}
	</select>
	
	<select id="selectAging" resultType="Pack.vo.InventoryVo">
		SELECT * , TIMESTAMPDIFF(MONTH, warehouse_date, now()) as fixed_month, datediff(now(), inventory_date) as warehouse_aging 
		FROM Inventory 
		ORDER BY warehouse_aging DESC LIMIT 10;
	</select>
		
	<select id="selectAmount" resultType="Pack.vo.InventoryVo">
		SELECT * , sum(amount) as sum, TIMESTAMPDIFF(MONTH, warehouse_date, now()) as fixed_month, datediff(now(), inventory_date) as warehouse_aging 
		FROM Inventory 
		GROUP BY item_name 
		ORDER BY sum(amount) DESC LIMIT 10;
	</select>
	
	<select id="selectMap" resultType="Pack.vo.InventoryMap">
		SELECT substring(warehouse_code, 2, 1) as warehouse_code_string, right(warehouse_code, 2) as warehouse_code_int, amount 
		FROM Inventory
		WHERE location = #{location}
	</select>
	
    <delete id="delete" parameterType="String">
    	DELETE
    	FROM Inventory
    	WHERE lot_no = #{lot_no}
    </delete>
    
    <delete id="deletes" parameterType="List">
    	<foreach collection="inventoryDeleteList" item="lot_no" index="index">
		    DELETE
			FROM Inventory
			where lot_no=#{lot_no};
		</foreach>
    </delete>
    
    <update id='update' parameterType="Pack.vo.InventoryUpd">
    	UPDATE Inventory
    	SET
    		industry_family = #{industry_family},
			stock_type = #{stock_type},
			stock_quality_status = #{stock_quality_status},
			status_cause = #{status_cause},
			location = #{location},
			product_family = #{product_family},
			warehouse_code = #{warehouse_code},
			item_code = #{item_code},
			state = #{state},
			item_name = #{item_name},
			amount = #{amount},
			weight = #{weight},
			unit = #{unit},
			customer = #{customer},
			width = #{width},
			thickness = #{thickness},
			height = #{height},
			inventory_date = #{inventory_date},
			warehouse_date = #{warehouse_date}
    	WHERE
    		lot_no = #{lot_no}
    </update>
    
    <insert id="insert" parameterType="Pack.vo.InventoryDTO">
	    INSERT
        INTO Inventory 
        VALUES (
        	#{lot_no},
        	#{industry_family},
        	NULL,
        	#{product_family},
        	#{state},
        	#{location},
        	#{warehouse_code},
        	#{item_code},
        	#{item_name},
        	#{amount},
        	#{unit},
        	#{weight},
        	#{width},
        	#{thickness},
        	#{height},
        	#{customer},
        	NULL,
        	NULL,
        	date_format(now(), "%Y-%m-%d"),
        	date_format(now(), "%Y-%m-%d")
        );
    </insert>
    
    <update id='reduce' parameterType="Pack.vo.LogiVo">
    	UPDATE Inventory
    	SET
			amount = (amount-#{ex_amount})
    	WHERE
    		lot_no = #{lot_no}
    </update>
        
    <update id='move' parameterType="Pack.vo.LogiVo">
    	UPDATE Inventory
    	SET
			warehouse_code = #{to_warehouse},
			warehouse_date = now()
    	WHERE
    		lot_no = #{lot_no}
    </update>
    
    <update id='produce' parameterType="Pack.vo.InventoryProduceDTO">
    		<foreach collection="consumedProducts" item="produce" index="index">
    		UPDATE Inventory
    		SET
    			amount = (amount-#{produce.amount})
    		WHERE
    			lot_no = #{produce.lot_no};
    		</foreach>
    		
    		INSERT
        	INTO Inventory 
        	VALUES (
	        	#{newProduct.lot_no},
	        	#{newProduct.industry_family},
	        	NULL,
	        	#{newProduct.product_family},
	        	#{newProduct.state},
	        	#{newProduct.location},
	        	#{newProduct.warehouse_code},
	        	#{newProduct.item_code},
	        	#{newProduct.item_name},
	        	#{newProduct.amount},
	        	#{newProduct.unit},
	        	#{newProduct.weight},
	        	#{newProduct.width},
	        	#{newProduct.thickness},
	        	#{newProduct.height},
	        	#{newProduct.customer},
	        	NULL,
	        	NULL,
	        	date_format(now(), "%Y-%m-%d"),
	        	date_format(now(), "%Y-%m-%d")
        	);
    </update>

    <select id='getTrendInfo' resultType="TrendInfo">
    	SELECT trend_idx, (UNIX_TIMESTAMP(date)* 1000) as date, inven_motor, inven_rotor, inven_strip, export_motor, export_rotor, export_strip FROM pscict_final.Trend;
    </select>

    <update id='statusChange' parameterType="StatusChangeInfo">
   		<foreach collection="statusChangeList" item="statusChangeLotno" index="index">
    		UPDATE Inventory
    		SET
    			stock_quality_status = #{stock_quality_status},
    			status_cause = #{status_cause}    			
    		WHERE
    			lot_no = #{statusChangeLotno};
   		</foreach>
    </update>
    
    <update id='processing' parameterType="ProcessingVo">
    		UPDATE Inventory
    		SET
    			state = #{state}    			
    		WHERE
    			lot_no = #{lot_no};
    </update>
    <update id='proccessDone' parameterType="LogiVo">
    		UPDATE Inventory
    		SET
    			state = ""    			
    		WHERE
    			lot_no = #{lot_no};
    </update>
    
</mapper>